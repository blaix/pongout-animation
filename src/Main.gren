module Main exposing (main)

import Math exposing (round)
import Playground exposing (..)

type alias Model =
    { greenBall : Ball
    , blackBall : Ball
    , board : Array Brick
    , maxCol : Float
    , maxRow : Float
    , minCol : Float
    , minRow : Float
    }

type alias Ball =
    { x : Float
    , y : Float
    , dx : Float
    , dy : Float
    , color: Color
    }

type alias Brick =
    { x : Float
    , y : Float
    , color: Color
    }

squareSize = 20
ballSpeed = 5

main =
    game view update 
        { greenBall = 
            { color = green 
            , x = 0
            , y = 0
            , dx = 1
            , dy = 1
            }
        , blackBall =
            { color = black
            , x = 0
            , y = 0
            , dx = -1
            , dy = -1
            }
        , board = []
        , maxCol = 0
        , minCol = 0
        , maxRow = 0
        , minRow = 0
        }

update : Computer -> Model -> Model
update computer model =
    if model.board == [] then
        init computer model
    else
        let
            newGreen =
                { ball = model.greenBall, board = model.board }
                    -- Move x and y separately since it's the easiest way to see if a
                    -- collision happened on a side or on the top/bottom, which we need to
                    -- know to change the x or y direction appropriately.
                    |> moveBallX model
                    |> moveBallY model

            newBlack =
                { ball = model.blackBall, board = newGreen.board }
                    |> moveBallX model
                    |> moveBallY model
        in
        { model
            | board = newBlack.board
            , greenBall = newGreen.ball
            , blackBall = newBlack.ball
        }

init : Computer -> Model -> Model
init computer model =
    let
        cols = computer.screen.width / squareSize / 2
        rows = computer.screen.height / squareSize / 2
        maxCol = cols
        maxRow = rows
        minCol = -cols
        minRow = -rows
    in
    { model
        | greenBall =
            { model.greenBall
                | x = (minCol + 4) * squareSize
                , y = 4 * squareSize
            }
        , blackBall =
            { model.blackBall
                | x = (maxCol - 4) * squareSize
                , y = 4 * squareSize
            }
        , maxCol = cols
        , maxRow = rows
        , minCol = -cols
        , minRow = -rows
        , board =
            Array.range (round minCol) (round maxCol)
                |> Array.map
                    (\x ->
                        Array.range (round minRow) (round maxRow)
                            |> Array.map
                                (\y ->
                                    { x = x * squareSize |> toFloat
                                    , y = y * squareSize |> toFloat
                                    , color =
                                        if x < 0 then
                                            black
                                        else
                                            green
                                    }
                                )
                    )
                |> Array.flatten
        }

moveBallX : Model -> { ball : Ball, board : Array Brick } -> { ball : Ball, board : Array Brick }
moveBallX model { ball, board } =
    let
        nextX = 
            ball.x + (ball.dx * ballSpeed)
        
        newBall =
            if nextX > (model.maxCol * squareSize) || nextX < (model.minCol * squareSize) then
                { ball | x = ball.x, dx = -ball.dx }
            else
                { ball | x = nextX, dx = ball.dx }

        hitBricks =
            board
                |> Array.filter
                    (\brick ->
                        newBall.color == brick.color &&
                        newBall.x < brick.x + squareSize &&
                        newBall.x + squareSize > brick.x &&
                        newBall.y < brick.y + squareSize &&
                        newBall.y + squareSize > brick.y
                    )

        newDx =
            if hitBricks == [] then
                newBall.dx
            else
                -newBall.dx

        newBoard =
            Array.map (swapColorIfHit hitBricks) board
    in
    { ball =
        { newBall | dx = newDx }
    , board =
        newBoard
    }

moveBallY : Model -> { ball : Ball, board : Array Brick } -> { ball : Ball, board : Array Brick }
moveBallY model { ball, board } =
    let
        nextY = 
            ball.y + (ball.dy * ballSpeed)
        
        newBall =
            if nextY > (model.maxRow * squareSize) || nextY < (model.minRow * squareSize) then
                { ball | y = ball.y, dy = -ball.dy }
            else
                { ball | y = nextY, dy = ball.dy }

        hitBricks =
            board
                |> Array.filter
                    (\brick ->
                        newBall.color == brick.color &&
                        newBall.x < brick.x + squareSize &&
                        newBall.x + squareSize > brick.x &&
                        newBall.y < brick.y + squareSize &&
                        newBall.y + squareSize > brick.y
                    )

        newDy =
            if hitBricks == [] then
                newBall.dy
            else
                -newBall.dy

        newBoard =
            Array.map (swapColorIfHit hitBricks) board
    in
    { ball =
        { newBall | dy = newDy }
    , board =
        newBoard
    }

swapColorIfHit : Array Brick -> Brick -> Brick
swapColorIfHit hitBricks brick =
    if Array.member brick hitBricks then
        { brick | color = swapColor brick.color }
    else
        brick

swapColor : Color -> Color
swapColor color =
    if color == green then
        black
    else
        green

view : Computer -> Model -> Array Shape
view computer model =
    drawBoard model.board ++
        [ drawBall model.greenBall
        , drawBall model.blackBall
        ]

drawBoard : Array Brick -> Array Shape
drawBoard board =
    Array.map drawBrick board

drawBrick : Brick -> Shape
drawBrick brick =
    square brick.color squareSize
        |> moveX brick.x
        |> moveY brick.y

drawBall : Ball -> Shape
drawBall ball =
    circle ball.color (squareSize / 2)
        |> moveX ball.x
        |> moveY ball.y
